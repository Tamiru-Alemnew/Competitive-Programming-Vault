# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/


class UnionFind:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.size = [1 for _ in range(n)]

    def find(self, node):
        if self.parent[node] != node:
            self.parent[node] = self.find(self.parent[node])
        return self.parent[node]

    def union(self, node1, node2):
        parent1 = self.find(node1)
        parent2 = self.find(node2)
        
        if parent1 == parent2:
            return

        if self.size[parent1] > self.size[parent2]:
            self.parent[parent2] = parent1
            self.size[parent1] += self.size[parent2]
        else:
            self.parent[parent1] = parent2
            self.size[parent2] += self.size[parent1]


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        N = len(graph)
        un = UnionFind(N)

        for i in range(N):
            for j in range(1+ i , N):
                if graph[i][j] == 1:
                    un.union(i , j)
        ans = -1
        size = 0
        initial.sort()
        for i in range(len(initial)):
            flag = True
            for j in range(len(initial)):
                if i != j and un.find(initial[i]) == un.find(initial[j]):
                    flag = False

            if flag:
                if un.size[un.find(initial[i])] > size:
                    ans = initial[i]
                    size = un.size[un.find(initial[i])]

        return initial[0] if ans == -1 else ans

