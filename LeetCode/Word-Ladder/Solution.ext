class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if endWord not in wordList:
            return 0

        nei = collections.defaultdict(list)
        wordList.append(beginWord)
        for i in range(len(wordList)):
            for j in range(i +1 , len(wordList)):
                first_word = wordList[i]
                second_word = wordList[j]
                count = 0 

                for z in range(len(first_word)):
                    count += first_word[z] != second_word[z]

                if count == 1:
                    nei[first_word].append(second_word)
                    nei[second_word].append(first_word)

        visit = set([beginWord])
        q = deque([beginWord])
        res = 1

        while q:
            for i in range(len(q)):
                word = q.popleft()
                if word == endWord:
                    return res

                for neiWord in nei[word]:
                    if neiWord not in visit:
                        visit.add(neiWord)
                        q.append(neiWord)
            res += 1
        return 0
